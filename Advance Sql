------------------------------------------------This is about the Dynamic SQl Statement--------------------------------------------
**dynamic SQL is not supported in "Read-only" procedures, you must remove the "READS SQL DATA" keywords as shown here ***

PROCEDURE "PROC_EXEC"(IN im_product_filter_string NVARCHAR(100))
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS
BEGIN
EXEC 'SELECT COUNT(*) FROM  "MD.Products" WHERE "CATEGORY" In(''Laser printers'')'+'AND CATEGORY = ''Notebooks''';
END

Do
BEGIN
EXEC 'SELECT COUNT(*) FROM  "MD.Products" WHERE "CATEGORY" In(''Laser printers'')'||'AND CATEGORY = ''Notebooks''';
END;

calling the Procedure -----> CALL "XSA_PRACTICE_HDI_DB_1"."PROC_EXEC"(IM_PRODUCT_FILTER_STRING => 'AND CATEGORY = ''Notebooks''')

Note --> The EXEC statement potentially will not resulting any of the ouput i will excute the satement itself.

================================================EXECUTE IMMEDIATE===========================================

Using EXECUTE IMMEDIATE Statement
In contrast to executing a string using EXEC, 

Note-----> executing the string using EXECUTE IMMEDIATE returns a result set.

PROCEDURE "PROC_EXECUTE_IMMEDIATE"(IN im_product_filter_string NVARCHAR(100))
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS
BEGIN
EXEC 'SELECT COUNT(*) FROM  "MD.Products" WHERE "CATEGORY" In(''Laser printers'')'+'AND CATEGORY = ''Notebooks''';
END;

calling the Procedure -----> CALL "XSA_PRACTICE_HDI_DB_1"."PROC_EXEC"(IM_PRODUCT_FILTER_STRING => 'AND CATEGORY = ''Notebooks''')

PROCEDURE "PROC_EXCUTEIMMEDIATE"()
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
 AS
BEGIN
 declare res varchar(10000);
 declare output integer;
 res =  'SELECT COUNT(*) FROM  "MD.Products" WHERE "CATEGORY" In(''Laser printers'')';
 EXECUTE IMMEDIATE res into output;
   if(output=3) then
   select * from "MD.Products";
   Else
   select * from "MD.Employees";
   END IF;
   The Execute immediate will result the returning the resultant value.
   
   ==========================================================Using APPLY FILTER Statement==================================================================
   
In contrast to EXEC and EXECUTE IMMEDIATE, APPLY_FILTER is sql injection save. Furthermore the result of the APPLY_FILTER will be assigned to a table variable. 

This allows further processing of the result by referring to the table variable. As APPLY_FILTER does not allow executing dynamic DML/DDL 
statements the procedure can be flagged read only which allows further optimization.
   
